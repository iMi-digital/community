page.includeCSS.community = EXT:community/Resources/Public/CSS/default.css

plugin.tx_community {

	# set the namespace so any plugin can share arguments
	view.pluginNamespace = tx_community

	mvc.callDefaultActionIfActionCantBeResolved = 1

	persistence {
		storagePid = 0,{$plugin.tx_community.persistence.storagePid}
	}

	settings {
		loginPage = {$plugin.tx_community.settings.loginPage}
		profilePage = {$plugin.tx_community.settings.profilePage}
		editProfilePage = {$plugin.tx_community.settings.editProfilePage}
		messagePage = {$plugin.tx_community.settings.messagePage}
		threadedMessagePage = {$plugin.tx_community.settings.threadedMessagePage}
		galleryPage = {$plugin.tx_community.settings.galleryPage}
		searchPage = {$plugin.tx_community.settings.searchPage}
		relationPage = {$plugin.tx_community.settings.relationPage}
		wallPage = {$plugin.tx_community.settings.wallPage}
		afterAccountDeletePage = {$plugin.tx_community.settings.loginPage}

		profile {
			image {
				maxWidth = 300
				maxHeight = 300
				prefix = uploads/tx_community/photos/
				types = jpeg,jpg,png,gif
				defaultImage = EXT:community/Resources/Public/Images/defaultProfileImage.png
				# in bytes, default 1048576 bytes (1MB)
				maxSize = 1048576
			}
			showCountryIcon = 1
			reasonForReportRequired = 1
			details {
				showDetails = username,gender,dateOfBirth,politicalView,religiousView,activities,interests,music,movies,books,quotes,aboutMe,address,city,zip,country,www,cellphone,phone,email
			}
		}

		album {
			image {
				prefix = uploads/tx_community/photos/
				types = jpeg,jpg,png
				# in bytes, default 1048576 bytes (1MB)
				maxSize = 1048576
			}
			#the image we see on list of albums when we have no acces to album
			unknownAlbumMainPhoto = EXT:community/Resources/Public/Images/unknownAlbumMainPhoto.png
			#the image we see on list of albums when on image in album
			dafaultAlbumMainPhoto = EXT:community/Resources/Public/Images/defaultAlbumMainPhoto.png
		}

		caching {
			Group = list,show
			User = image,details
			Relation = listSome,unconfirmed
			AclRole = list,assign
		}

		userlist {
			limit = 20
			pagebrowser = 1
			itemsPerPage = 10
		}

		//Allows to set access to multiple actions with one 'variable'
		//Actions that user can do only on himself don't need to be here
		accessActionResourceMap {
			Message {
				writeThreaded = message.write
				thread = message.thread
				write = message.write
				send = message.write
			}
			User {
				image = profile.image
				edit = profile.edit
				search = user.search
				searchBox = user.searchBox
				update = profile.edit
				details = profile.details
				interaction = profile.menu
				editImage = profile.edit.image
				report = profile.report
				list = user.list
			}
			Relation {
				listSome = profile.relation.listSome
				list = profile.relation.list
				request = profile.relation.request
				confirm = profile.relation.confirm
				reject = profile.relation.reject
				unconfirmed = profile.relation.unconfirmed
				cancel = profile.relation.cancel
			}
			WallPost {
				list = profile.wall.list
				new = profile.wall.write
				create = profile.wall.write
				delete = profile.wall.write
			}
			Album {
				list = profile.gallery
				show = profile.gallery
			}
			Photo {
				avatar = profile.gallery.avatar
					//allows seting other users photo as avatar
					//but still need to be able to see the photo
			}
			Utils {
				flashMessagesDisplay = utils
			}
		}

		accessRules {
			#guests (not logged in), and requested user not set
			public {
				access = 0
				utils.access = 1
			}
			#guests (not logged in)
			nobody < plugin.tx_community.settings.accessRules.public
			nobody {
				access = 0
				profile.gallery.access = 1
				profile.image.access = 1
			}

			#logged in, but not a friend
			other < plugin.tx_community.settings.accessRules.nobody
			other {
				access = 0
				user.search.access = 1
				user.searchBox.access = 1
				profile.menu.access = 1
				profile.relation.listSome.access = 1
				profile.relation.list.access = 1

				#unconfirmed friend is "other"
				profile.relation.confirm.access = 1
				profile.relation.reject.access = 1
				profile.relation.request.access = 1
				profile.relation.unconfirmed.access = 1
				profile.report.access = 1

				profile.details.access = 1

				profile.gallery.access = 1
				profile.wall.list.access = 1
				message.thread.access = 1

				user.list.access = 1
			}

			friend < plugin.tx_community.settings.accessRules.other
			friend {
				access = 0
				profile.relation.access = 1
				profile.relation.cancel.access = 1
				profile.wall.write.access = 1
				message.write.access = 1
			}
		}

		notification {
			templateRootPath = EXT:community/Resources/Private/Templates/Notification/
			layoutRootPath = EXT:community/Resources/Private/Layouts/
			partialRootPath = EXT:community/Resources/Private/Partials/
			defaults {
				handler = Macopedia\Community\Service\Notification\MailHandler
				serverEmail = {$plugin.tx_community.serverEmail}
			}
			rules {
				relationRequest {
					10 {
						template = RelationRequest
					}

				}
				relationConfirm {
					10 {
						template = RelationConfirm
					}
				}

				/* enable it if you want - not used by default
				relationAbandonRequest {
					10 {
						subject = Relation Abandon
						template = RelationAbandonRequest
					}
				}
				*/

				relationRejectRequest {
					10 {
						template = RelationRejectRequest
					}
				}
				relationCancel {
					10 {
						template = RelationCancel
					}
				}

				#admin notification about bad profile
				userReport {
					10 {
						template = UserReport
						recipient = {$plugin.tx_community.adminEmail}
						overrideRecipient = 1
						replyToSenderUser = 1
					}
				}
				#notification about private message
				messageSend {
					10 {
						template = MessageSend
					}
				}
				#notification about wall message
				wallPostCreate {
					10 {
						template = WallPostCreate
					}
				}
			}
		}

		debug = 0

		#css-like path to the element, on it's beginning flashMessages would be displayed
		#it would be used by jQuery
		#eg.
		# flashMessagesDisplayer.where = .contents
		flashMessagesDisplayer.where = body
	}
}

config.tx_extbase {
	persistence.classes {
		Macopedia\Community\Domain\Model\User {
			mapping {
				tableName = fe_users
				userGroup.foreignClass = \TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup
				columns {
					profile_image.mapOnProperty = image
				}
			}
		}
		Macopedia\Community\Domain\Model\FrontendUserGroup {
			mapping {
				tableName = fe_groups
				recordType = \TYPO3\CMS\Extbase\Domain\Model\FrontendUserGroup
				columns {
					lockToDomain.mapOnProperty = lockToDomain
				}
			}
		}
		Macopedia\Community\Domain\Model\Message {
			mapping {
				columns {
					Macopedia\Community\read.mapOnProperty = read
				}
			}
		}
	}
}

config.tx_extbase.objects {
	TYPO3\CMS\Extbase\Persistence\Generic\Storage\BackendInterface.className = Macopedia\Community\Persistence\Storage\Typo3DbBackend
	TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser.className = Macopedia\Community\Persistence\Storage\Typo3DbQueryParser
	Macopedia\Community\Service\Access\AccessServiceInterface {
		className = Macopedia\Community\Service\Access\SimpleAccessService
	}
	Macopedia\Community\Service\Cache\CacheServiceInterface {
		# disable internal caching
		className = Macopedia\Community\Service\Cache\NoCacheService
	}
	Macopedia\Community\Service\Notification\NotificationServiceInterface {
		className = Macopedia\Community\Service\Notification\NotificationService
	}
}

plugin.tx_community.flashMessagesDisplayer = USER_INT
plugin.tx_community.flashMessagesDisplayer {
	userFunc = \TYPO3\CMS\Extbase\Core\Bootstrap->run
	extensionName = Community
	pluginName = FlashMessagesDisplayer
}